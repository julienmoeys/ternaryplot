% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ternaryNormalise.R
\name{ternaryNormalise}
\alias{ternaryNormalise}
\alias{ternaryNormalise.character}
\alias{ternaryNormalise.ternarySystem}
\title{Normalise the sum of ternary fractions in ternary data to 1 or 100\%.}
\usage{
ternaryNormalise(s, x, ...)

\method{ternaryNormalise}{ternarySystem}(s, x, residuals = TRUE, ...)

\method{ternaryNormalise}{character}(s, x, residuals = TRUE, ...)
}
\arguments{
\item{s}{Either \itemize{
  \item A \code{\link[ternaryplot]{ternarySystem-class}}, or 
  \item A character string naming a pre-defined ternary 
    \code{\link[ternaryplot]{ternarySystem-class}}.
}}

\item{x}{A \code{\link[base]{data.frame}} containing the 
ternary data to be normalised. It must contain 
the 3 column names found in 
\code{\link[ternaryplot]{blrNames}}\code{(s)}).}

\item{residuals}{Single logical value. If \code{TRUE}, the residuals 
of the normalisation are added to \code{x} (new column 
named \code{residual}).}

\item{\dots}{Additional parameters passed to 
\code{\link[ternaryplot]{ternaryCheck}}.}
}
\value{
A \code{\link[base]{data.frame}} with the normalised 
 ternary data. If \code{residuals} is \code{TRUE}, a new 
 column (\code{"residuals"}) is added to the 
 \code{data.frame} with the residuals of the normalisation: 
 Sum of ternary fractions after normalisation minus 
 sum of ternary fractions before normalisation. So if a 
 value in \code{"residuals"} is \code{> 0} it means the 
 sum of ternary fractions was below 1 or 100\%, while 
 if a value in \code{"residuals"} is \code{< 0} it means 
 the sum of ternary fractions was above 1 or 100\%.
}
\description{
Normalise the sum of ternary fractions in ternary data to 
 1 [-] or 100\% (depending on 
 \code{\link[ternaryplot]{fracSum}}\code{(s)}), and optionally 
 returns the residual of the normalisation (as an extra 
 column added to \code{x}).
}
\examples{

library( "ternaryplot" )


#   Load an example dataset ( dummy example )
data( "textureDataset", package = "ternaryplot" ) 


#   Copy, subset and alter the dataset, so that the values 
#   are not summing to 100\% any longer
textureDataset2 <- textureDataset[ 1:4, ] 

textureDataset2[, "CLAY" ] <- 
    textureDataset2[, "CLAY" ] + c( -1, 0, 0, 0 ) 

textureDataset2[, "SILT" ] <- 
    textureDataset2[, "SILT" ] + c( 0, 1, 0, 0 ) 

textureDataset2[, "SAND" ] <- 
    textureDataset2[, "SAND" ] + c( 0, 0, 1, 0 ) 


#   Normalise the dataset to 100\% again
textureDataset2n <- ternaryNormalise( 
    s = "hypres", 
    x = textureDataset2 )


#   Check the sum of 3 fractions (also done internally in 
#   ternaryNormalise)
rowSums( textureDataset2n[, c( "CLAY", "SILT", "SAND" ) ] ) 

#   Fetch the residuals (of the normalisation)
textureDataset2n[, "residuals" ]


# # Would also work
# s <- ternaryPlot( "hypres" ) 
# textureDataset2n <- ternaryNormalise( 
    # s = s, 
    # x = textureDataset2 )
# ternaryPoints( s = s, x = textureDataset2n ) 

}

