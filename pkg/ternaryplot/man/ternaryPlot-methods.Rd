% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ternaryPlot.R
\name{ternaryPlot}
\alias{ternaryPlot}
\alias{ternaryPlot.character}
\alias{ternaryPlot.ternarySystem}
\title{Plot a ternary diagram, ternary data and ternary classifications.}
\usage{
ternaryPlot(s, ...)

\method{ternaryPlot}{character}(s, ...)

\method{ternaryPlot}{ternarySystem}(s, x = NULL, type = "p", main = NULL,
  sub = NULL, axes = TRUE, frame.plot = TRUE, scale = FALSE, ...)
}
\arguments{
\item{s}{Either \itemize{
   \item A \code{\link[ternaryplot]{ternarySystem-class}}, or
   \item A single character string, the name of an existing
     pre-defined \code{\link[ternaryplot]{ternarySystem-class}}.
 }}

\item{x}{A \code{\link[base]{data.frame}} or a
 \code{\link[base]{matrix}} containing point ternary data
 to be plot on the graph. It should contain the 3 columns
 names given by \code{blrNames(s)}. If missing, only the
 ternary classification is drawn.}

\item{type}{Single character string. Type of plot desired. The
 following values are possible: \code{"p"} for points
 and \code{"n"} for nothing (just a base ternary plot,
 without data overlay). See also
 \code{\link[ternaryplot]{ternaryPoints}}.}

\item{main}{Single character string, or \code{\link[base]{expression}}.
 Main title of the plot. Passed on to
 \code{\link[graphics]{title}}. If \code{NULL}, the default
 title defined in \code{s} is used (i.e. \code{main}
 overrides any title settings in \code{s}). To suppress
 the title set to \code{NA} or \code{""}.}

\item{sub}{Single character string, or \code{\link[base]{expression}}.
 Subtitle of the plot. Passed on to
 \code{\link[graphics]{title}}. Set to \code{NULL},
 \code{NA} or \code{""} to suppress the subtitle. Notice
 that when used in conjunction with
 \code{\link[ternaryplot]{ternaryStyle}}\code{(margin=TRUE)},
 \code{sub} is drawn below the figure margins (so don't used
 it in that case).}

\item{axes}{Single logical value. If \code{TRUE}, axis are drawn on
 the plot. See also \code{\link[ternaryplot]{ternaryAxis}}.
 By axis is meant the axis lines, the axis tick lines,
 the axis tick labels, the arrows and the axis titles.
 See \code{arrows} and \code{arrowsBreak} in
 \code{\link[ternaryplot]{tpPar}} for suppressing the
 axis arrows or the axis arrows 'break' (straight arrows),
 respectively.}

\item{frame.plot}{Single logical value. If \code{TRUE}, a frame is drawn
 around the plot, as well as a background colour (when
 relevant). See also 'plot.bg' in
 \code{\link[ternaryplot]{tpPar}} and
 \code{\link[ternaryplot]{ternaryBox}}. Notice that
 \code{\link[graphics]{par}}\code{(bty="n")} overrides
 \code{frame.plot} (no box is drawn).}

\item{scale}{Either a logical value or a \code{\link[base]{data.frame}} with
 3 columns and 2 rows. If \code{TRUE}, the triangle plot will
 be scaled to fit the data. If \code{FALSE}, no scaling is
 performed, and the full extent triangle plot is drawn. If a
 \code{data.frame}, contains the min and max limits of each
 of the 3 variables (columns = variables, rows = min and max).}

\item{\dots}{Additional parameters passed to
 \code{\link[ternaryplot]{ternaryPoints}}}
}
\description{
Plot a ternary diagram, ternary data and ternary classifications.
}
\examples{

library( "ternaryplot" ) 

# Simple example, with point overlay
# ==================================

#   Save graphical parameters (to reset them later)
op <- par( no.readonly = TRUE ) 

#   Define the plot style (optional)
ternaryStyle( margin = TRUE ) 

#   Load an example dataset ( dummy example )
data( "textureDataset", package = "ternaryplot" ) 

#   Simple ternary plot with point overlay
ternaryPlot( 
    s   = "default", 
    x   = textureDataset[, c( "SAND", "CLAY", "SILT" ) ], 
    pch = textureDataset[, "GROUP" ] ) 



# Same example, with a ternary classification
# ===========================================

#   Simple ternary plot with point overlay
ternaryPlot( 
    s   = "hypres", 
    x   = textureDataset, 
    pch = textureDataset[, "GROUP" ] ) 

#   Notice that in the example above "hypres" classification 
#   *requires* columns named CLAY, SILT and SAND and 
#   will not take any other column names.



# Same example, with a ternary classification
# and custom column names for the texture classes
# ===========================================

#   Copy the dataset
textureDataset2 <- textureDataset[, c( "CLAY", "SILT", 
    "SAND", "GROUP" ) ]

#   Rename columns
colnames( textureDataset2 ) <- c( "clay", "silt", "sand", 
    "group" ) 

#   Fetch the definition of the ternary classification
hypres <- getTernarySystem( "hypres" ) 

#   Set the column names
#   Note: the order matter!
blrNames( hypres ) <- c( "sand", "clay", "silt" ) 

#   Set new labels
blrLabels( hypres ) <- c( "sand [\%]", "clay [\%]", "silt [\%]" ) 

#   Simple ternary plot with point overlay
ternaryPlot( 
    s   = hypres, 
    x   = textureDataset2, 
    pch = textureDataset2[, "group" ] )



# Vary the plot geometry
# ======================

# Prepare the plot layout
# -----------------------

#   Reset plot parameters
par( op )
tpPar( reset = TRUE )

#   Split the window in 4 sub-plots
par( mfrow = c(2,2) )

#   Set the plot style (optional)
ternaryStyle() 



# Default ternary plot
# --------------------

s <- ternaryPlot() 


# Change axis orientation (clockwise vs counter-clockwise)
# --------------------------------------------------------

#   Set new orientation
blrClock( s ) <- rep( FALSE, 3 ) 

#   Plot
ternaryPlot(s) 


# Change axis orientation and frame angles
# ----------------------------------------

#   Set new orientation and angles
blrClock( s )  <- c( FALSE, TRUE, NA ) 
tlrAngles( s ) <- c( 45, 90, 45 ) 

#   Plot
ternaryPlot(s) 


# Same, other direction
# ---------------------

blrClock( s ) <- c( TRUE, NA, FALSE ) 
tlrAngles( s ) <- c(45,45,90) 

ternaryPlot(s) 



#   reset par (completely)
par( op )
tpPar( reset = TRUE )
}

